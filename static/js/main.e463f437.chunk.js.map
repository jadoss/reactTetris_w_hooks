{"version":3,"sources":["gameHelpers.js","tetrominos.js","hooks/useStage.js","hooks/useGameStatus.js","components/styles/StyledTetris.js","components/styles/StyledCell.js","components/Cell.js","components/styles/StyledStage.js","components/Stage.js","components/styles/StyledDisplay.js","components/Display.js","components/styles/StyledStartButton.js","components/StartButton.js","components/Tetris.js","hooks/usePlayer.js","hooks/useInterval.js","components/App.js","index.js","img/bg.png"],"names":["createStage","Array","from","fill","checkCollision","player","stage","moveX","x","moveY","y","tetromino","length","pos","TETROMINOS","0","shape","color","I","J","L","O","S","T","Z","randomTetromino","Math","floor","random","useStage","resetPlayer","useState","setStage","rowsCleared","setRowsCleared","useEffect","updateStage","prevStage","newStage","map","row","cell","forEach","value","collided","reduce","ack","findIndex","prev","unshift","push","sweepRows","StyledTetrisWrapper","styled","div","bgImage","StyledTetris","StyledCell","props","type","React","memo","StyledStage","height","width","Stage","key","StyledDisplay","gameOver","Display","text","StyledStartButton","button","StartButton","callback","onClick","Tetris","dropTime","setDropTime","setGameOver","setPlayer","rotate","matrix","dir","rotatedTetro","_","index","col","reverse","useCallback","STAGE_WIDTH","clonedPlayer","JSON","parse","stringify","offset","usePlayer","updatePlayerPos","playerRotate","score","setScore","rows","setRows","level","setLevel","linePoints","calcScore","useGameStatus","console","log","movePlayer","drop","move","keyCode","delay","savedCallback","useRef","current","id","setInterval","clearInterval","useInterval","role","tabIndex","onKeyDown","e","onKeyUp","App","ReactDOM","render","document","getElementById","module","exports"],"mappings":"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","file":"static/js/main.e463f437.chunk.js","sourcesContent":["export const STAGE_WIDTH = 12;\nexport const STAGE_HEIGHT = 20;\n\nexport const createStage = () =>\n    Array.from(Array(STAGE_HEIGHT), () =>\n    new Array(STAGE_WIDTH).fill([0, 'clear'])\n    )\n\nexport const checkCollision = (player, stage, { x: moveX, y: moveY }) => {\n    for (let y = 0; y < player.tetromino.length; y += 1) {\n        for (let x = 0; x < player.tetromino[y].length; x += 1) {\n\n            // 1. Check that we're on an actual Tetromino cell\n            if (player.tetromino[y][x] !== 0) {\n                if (\n                // 2. Check that our move is inside the game areas height (y)\n                // We shouldnth go through the bottom of the play area\n                !stage[y + player.pos.y + moveY] || \n                //3. Check that our move is inside the game areas width (x)\n                !stage[y + player.pos.y + moveY][x + player.pos.x + moveX] ||\n                //4. Check that the cell we're moving to isnt set to clear\n                stage[y + player.pos.y + moveY][x + player.pos.x + moveX][1] !== \n                    'clear'\n                ) {\n                    return true;\n                }\n            }\n        }\n    }\n}","export const TETROMINOS = {\n    0: { shape: [[0]], color: '0,0,0' },\n    I: {\n        shape: [\n            [0, 'I', 0,0],\n            [0, 'I', 0,0],\n            [0, 'I', 0,0],\n            [0, 'I', 0,0]\n        ],\n        color: '80, 227, 230',\n    },\n    J: {\n        shape: [\n            [0, 'J', 0],\n            [0, 'J', 0],\n            ['J', 'J', 0]\n        ],\n        color: '36, 95, 223',\n    },\n    L: {\n        shape: [\n            [0, 'L', 0],\n            [0, 'L', 0],\n            [0, 'L', 'L']\n        ],\n        color: '223, 173, 36',\n    },\n    O: {\n        shape: [\n            ['O', 'O'],\n            ['O', 'O'],\n        ],\n        color: '223, 217, 36',\n    },\n    S: {\n        shape: [\n            [0, 'S', 'S'],\n            ['S', 'S', 0],\n            [0, 0, 0],\n        ],\n        color: '48, 211, 56',\n    },\n    T: {\n        shape: [\n            [0, 0, 0],\n            ['T', 'T', 'T'],\n            [0, 'T', 0],\n        ],\n        color: '132, 61, 198',\n    },\n    Z: {\n        shape: [\n            ['Z', 'Z', 0],\n            [0, 'Z', 'Z'],\n            [0, 0, 0],\n        ],\n        color: '227, 78, 78',\n    },\n};\n\nexport const randomTetromino = () => {\n    const tetrominos = 'IJLOSTZ';\n    const randomTetromino = \n        tetrominos[Math.floor(Math.random() * tetrominos.length)];\n    return TETROMINOS[randomTetromino];\n}","import { useState, useEffect } from 'react';\nimport { createStage } from '../gameHelpers';\n\nexport const useStage = (player, resetPlayer) => {\n    const [stage, setStage] = useState(createStage());\n    const [rowsCleared, setRowsCleared] = useState(0);\n\n    useEffect(() => {\n        setRowsCleared(0);\n\n        const sweepRows = newStage => \n            newStage.reduce((ack, row) => {\n                if(row.findIndex(cell => cell[0] === 0) === -1) {\n                    setRowsCleared(prev => prev + 1);\n                    ack.unshift(new Array(newStage[0].length).fill([0, 'clear']));\n                    return ack;\n                }\n                ack.push(row);\n                return ack;\n            }, [])\n\n        const updateStage = prevStage => {\n            // First flush the stage\n            const newStage = prevStage.map(row => \n                row.map(cell => (cell[1] === 'clear' ? [0, 'clear'] : cell)),\n            );\n\n            //then draw the tetromino\n            player.tetromino.forEach((row, y) => {\n                row.forEach((value, x) => {\n                    if (value !== 0) {\n                        newStage[y + player.pos.y][x + player.pos.x] = [\n                            value, \n                            `${player.collided ? 'merged' : 'clear'}`,\n                        ]; //this will give us coordinates\n                    }\n                });\n            });\n            // Then check if we collided\n            if (player.collided) {\n                resetPlayer();\n                return sweepRows(newStage);\n            }\n\n            return newStage;\n        }\n\n        setStage(prev => updateStage(prev))\n    }, [player, resetPlayer]);\n\n    return [stage, setStage, rowsCleared];\n}","import { useState, useEffect, useCallback } from 'react';\n\nexport const useGameStatus = rowsCleared => {\n    const [score, setScore] = useState(0);\n    const [rows, setRows] = useState(0);\n    const [level, setLevel] = useState(0);\n\n    const linePoints = [40, 100, 300, 1200];\n\n    const calcScore = useCallback(() => {\n        //we have score\n        if (rowsCleared > 0) {\n            // this is how original score is calculated\n            setScore(prev => prev + linePoints[rowsCleared - 1] * (level + 1));\n            setRows(prev => prev + rowsCleared);\n        }\n    }, [level, linePoints, rowsCleared]);\n\n    useEffect(() => {\n        calcScore();\n    }, [calcScore, rowsCleared, score]);\n\n    return [score, setScore, rows, setRows, level, setLevel];\n}","import styled from 'styled-components';\n\nimport bgImage from '../../img/bg.png';\n\nexport const StyledTetrisWrapper = styled.div`\n    width: 100vw;\n    height: 100vh;\n    background: url(${bgImage}) #000;\n    background-size: cover;\n    overflow: hidden;\n`\n\nexport const StyledTetris = styled.div`\n    display: flex;\n    align-items: flex-start;\n    padding: 40px;\n    margin: 0 auto;\n    max-width: 900px;\n\n    aside {\n        width: 100%;\n        max-width: 200px;\n        display: block;\n        padding: 0 20px;\n    }\n`","import styled from 'styled-components';\n\nexport const StyledCell = styled.div`\n    width: auto;\n    height: auto;\n    background: rgba(${props => props.color}, 0.8);\n    border: ${props => (props.type === 0 ? '0px solid' : '4px solid')};\n    border-bottom-color: rgba(${props => props.color}, 0.2);\n    border-right-color: rgba(${props => props.color}, 1);\n    border-top-color: rgba(${props => props.color}, 1);\n    border-left-color: rgba(${props => props.color}, 0.4);\n`","import React from 'react';\nimport { StyledCell } from './styles/StyledCell'\nimport { TETROMINOS } from '../tetrominos';\n//type is our hook for Cell\nconst Cell = ({ type }) => {\n    return (\n        <StyledCell type={type} color={TETROMINOS[type].color} />\n    )\n}\n\nexport default React.memo(Cell);","import styled from 'styled-components';\n\nexport const StyledStage = styled.div`\n    display: grid;\n    grid-template-rows: repeat(\n        ${props => props.height},\n        calc(25vw / ${props => props.width})\n    );\n    grid-template-columns: repeat(${props => props.width}, 1fr);\n    grid-gap: 1px;\n    border: 2px solid #333;\n    width: 100%;\n    max-width: 25vw;\n    background: #111;\n`;","import React from 'react';\nimport Cell from './Cell';\nimport { StyledStage } from './styles/StyledStage';\n\n// stage is our hook\nconst Stage = ({ stage }) => {\n    return (\n        <StyledStage width={stage[0].length} height={stage.length}>\n            {stage.map(row => row.map((cell, x) => <Cell key={x} type={cell[0]} />))}\n        </StyledStage>\n    );\n}\n\nexport default Stage;","import styled from 'styled-components';\n\nexport const StyledDisplay = styled.div`\n    box-sizing: border-box;\n    display: flex;\n    align-items: center;\n    margin: 0 0 20px 0;\n    padding: 20px;\n    border: 4px solid #333;\n    min-height: 30px;\n    width: 100%;\n    border-radius: 20px;\n    color: ${props => (props.gameOver ? 'red' : '#999')};\n    background: #000;\n    font-family: Pixel, Ariel, Velvetica, sans-serif;\n    font-size: 0.8rem;\n`;","import React from 'react';\nimport { StyledDisplay } from './styles/StyledDisplay'\n\n// gameOver and text are our first two hooks\nconst Display = ({ gameOver, text}) => {\n    return (\n        <StyledDisplay gameOver={gameOver}>{text}</StyledDisplay>\n    )\n}\n\nexport default Display;","import styled from 'styled-components';\n\nexport const StyledStartButton = styled.button`\n    box-sizing: border-box;\n    margin: 0 0 20px 0;\n    padding: 20px;\n    min-height: 30px;\n    width: 100%;\n    border-radius: 20px;\n    border: none;\n    color: white;\n    background: #333;\n    font-family: Pixel, Ariel, Helvetica, sans-seriff;\n    font-size: 1rem;\n    outline: none;\n    cursor: pointer;\n`","import React from 'react';\nimport { StyledStartButton } from './styles/StyledStartButton';\n\nconst StartButton = ({ callback }) => {\n    return (\n        <StyledStartButton onClick={callback}>Start Game</StyledStartButton>\n    )\n}\n\nexport default StartButton","import React, { useState } from 'react';\n\nimport { createStage, checkCollision } from '../gameHelpers';\n\n// custom hooks\nimport { usePlayer } from '../hooks/usePlayer';\nimport { useStage } from '../hooks/useStage';\nimport { useInterval } from '../hooks/useInterval';\nimport { useGameStatus } from '../hooks/useGameStatus';\n\n//styled components\nimport { StyledTetrisWrapper, StyledTetris } from './styles/StyledTetris';\n\n//Components here\nimport Stage from './Stage';\nimport Display from './Display';\nimport StartButton from './StartButton';\n\nconst Tetris = () => {\n    //set speed\n    const [dropTime, setDropTime] = useState(null);\n    // game over\n    const[gameOver, setGameOver] = useState(false);\n\n    const [player, updatePlayerPos, resetPlayer, playerRotate] = usePlayer();\n    const [stage, setStage, rowsCleared] = useStage(player, resetPlayer);\n    const [ score, setScore, rows, setRows, level, setLevel] = useGameStatus(\n        rowsCleared\n    );\n\n    console.log('re-render');\n\n    const movePlayer = dir => {\n        if (!checkCollision(player, stage, { x: dir, y: 0 })) {\n            updatePlayerPos({x: dir, y: 0});    \n        }\n    }\n\n    const startGame = () => {\n        //reset everything\n        setStage(createStage());\n        setDropTime(1000);\n        resetPlayer();\n        setGameOver(false);\n        setScore(0);\n        setLevel(0);\n        setRows(0);\n    }\n\n    const drop = () => {\n        console.log(dropTime);\n        // increase level when player has cleared 10 rows\n        if (rows > (level + 1) * 10) {\n            setLevel(prev => prev + 1);\n            // also increase speed\n            setDropTime(1000 / (level + 1) + 200);\n        }\n        if (!checkCollision(player, stage, { x: 0, y: 1 })) {\n            updatePlayerPos({ x: 0, y: 1, collided: false })    \n        } else {\n            //Game Over\n            if (player.pos.y < 1) {\n                console.log(\"GAME OVER!\");\n                setGameOver(true);\n                setDropTime(null);\n            }\n            updatePlayerPos({ x: 0, y: 0, collided: true });\n        }\n    }\n\n    const keyUp = ({ keyCode }) => {\n        if(!gameOver) {\n            if(keyCode === 40) {\n                console.log(\"interval off\")\n                if (level === 0) {\n                    setDropTime(1000);    \n                } else if (level > 0) {\n                    setDropTime(1000 / level + 200);\n                }\n            }\n        }\n    }\n\n    const dropPlayer = () => {\n        console.log(\"interval off\");\n        setDropTime(null);\n        drop();\n    }\n    //keycode 37 is code for left arrow\n    const move = ({ keyCode}) => {\n        if (!gameOver) {\n            if (keyCode === 37) {\n                movePlayer(-1);\n            } else if (keyCode === 39) {\n                movePlayer(1)\n            } else if (keyCode === 40) {\n                dropPlayer();\n            } else if (keyCode === 38) {\n                playerRotate(stage, 1);\n            }\n        }\n    }\n\n    useInterval(() => {\n        drop();\n    }, dropTime)\n\n    return (\n        <StyledTetrisWrapper \n            role=\"button\" \n            tabIndex=\"0\" \n            onKeyDown={e => move(e)} \n            onKeyUp={keyUp}\n            >\n            <StyledTetris>\n                <Stage stage={stage} />\n                <aside>\n                    {gameOver ? (\n                        <Display gameOver={gameOver} text=\"Game Over\" />\n                    ) : (\n                        <div>\n                        <Display text={`Score: ${score}`} />\n                        <Display text={`Rows: ${rows}`} />\n                        <Display text={`Level: ${level}`} />\n                        </div>    \n                    )}\n                    <StartButton callback={startGame} />\n                </aside>    \n            </StyledTetris>\n        </StyledTetrisWrapper>\n    );\n}\n\nexport default Tetris;","import { useState, useCallback } from 'react';\n\nimport { TETROMINOS, randomTetromino } from '../tetrominos';\nimport { STAGE_WIDTH, checkCollision } from '../gameHelpers';\n\nexport const usePlayer = () => {\n    //player initial state and use setplayer to change state\n    const [player, setPlayer] = useState({\n        pos: {x: 0, y: 0 },\n        tetromino: TETROMINOS[0].shape,\n        collided: false,\n    });\n\n    const rotate = (matrix, dir) => {\n        // make the rows to become cols (transpose)\n        const rotatedTetro = matrix.map((_, index) => \n            matrix.map(col => col[index]),\n        );\n        // Reverse each row to get a rotated matrix\n        if (dir > 0) return rotatedTetro.map(row => row.reverse());\n        return rotatedTetro.reverse();\n    }\n\n    const playerRotate = (stage, dir) => {\n        const clonedPlayer = JSON.parse(JSON.stringify(player));\n        clonedPlayer.tetromino = rotate(clonedPlayer.tetromino, dir);\n\n        const pos = clonedPlayer.pos.x;\n        let offset = 1;\n        while(checkCollision(clonedPlayer, stage,{ x: 0, y: 0 })) {\n            clonedPlayer.pos.x += offset;\n            offset = -(offset + (offset > 0 ? 1 : -1));\n            if (offset > clonedPlayer.tetromino[0].length) {\n                rotate(clonedPlayer.tetromino, -dir);\n                clonedPlayer.pos.x = pos;\n                return;\n            }\n        }\n\n        setPlayer(clonedPlayer);\n    }\n\n    const updatePlayerPos = ({ x, y, collided }) => {\n        setPlayer(prev => ({\n            ...prev,\n            pos: { x: (prev.pos.x += x), y: (prev.pos.y += y)},\n            collided,\n        }))\n    }\n\n    const resetPlayer = useCallback(() => {\n        setPlayer({\n            pos: { x: STAGE_WIDTH / 2 - 2, y: 0 },\n            tetromino: randomTetromino().shape,\n            collided: false,\n        })\n    }, [])\n\n    return [player, updatePlayerPos, resetPlayer, playerRotate];\n}","import { useEffect, useRef } from 'react';\n\nexport function useInterval(callback, delay) {\n  const savedCallback = useRef();\n  // Remember the latest callback.\n  useEffect(() => {\n    savedCallback.current = callback;\n  }, [callback]);\n\n  // Set up the interval.\n  useEffect(() => {\n    function tick() {\n      savedCallback.current();\n    }\n    if (delay !== null) {\n      const id = setInterval(tick, delay);\n      return () => {\n        clearInterval(id);\n      };\n    }\n  }, [delay]);\n}\n","import React from 'react';\nimport Tetris from './Tetris'\n\nconst App = () => {\n    return (\n            <Tetris />\n    );\n}\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App';\nimport './index.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n\n","module.exports = __webpack_public_path__ + \"static/media/bg.2810fe6b.png\";"],"sourceRoot":""}